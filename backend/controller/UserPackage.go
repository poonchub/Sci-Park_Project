package controller

import (
	"net/http"
	

	"github.com/gin-gonic/gin"
	"sci-park_web-application/config"
	"sci-park_web-application/entity"
)

// =============================
// üéØ GET /room-discount/:id
// =============================
// GET /room-discount/:id
func GetRoomDiscountByID(c *gin.Context) {
    db := config.DB()
    id := c.Param("id")

    var user entity.User
    if err := db.Preload("UserPackages.Package").Where("id = ?", id).First(&user).Error; err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "load user package failed", "detail": err.Error()})
        return
    }

    // default = 0
    resp := gin.H{
        "meeting": gin.H{"total": 0, "used": 0, "remaining": 0},
        "training": gin.H{"total": 0, "used": 0, "remaining": 0},
        "multi": gin.H{"total": 0, "used": 0, "remaining": 0},
    }

    // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á user (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà logic ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß active ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    if len(user.UserPackages) > 0 {
        up := user.UserPackages[len(user.UserPackages)-1]
        // totals
        mt, tt, ft := up.Package.MeetingRoomLimit, up.Package.TrainingRoomLimit, up.Package.MultiFunctionRoomLimit
        // used
        mu, tu, fu := up.MeetingRoomUsed, up.TrainingRoomUsed, up.MultiFunctionRoomUsed

        resp["meeting"] = gin.H{"total": mt, "used": mu, "remaining": max(mt-mu, 0)}
        resp["training"] = gin.H{"total": tt, "used": tu, "remaining": max(tt-tu, 0)}
        resp["multi"] = gin.H{"total": ft, "used": fu, "remaining": max(ft-fu, 0)}
    }

    c.JSON(http.StatusOK, resp)
}

func max(a, b int) int {
    if a > b { return a }
    return b
}


func UseRoomQuota(c *gin.Context) {
	db := config.DB()
	var req struct {
		UserID    uint   `json:"user_id"`
		RoomType  string `json:"room_type"` // "meeting", "training", "multi"
	}

	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	var userPackage entity.UserPackage
	if err := db.Where("user_id = ?", req.UserID).First(&userPackage).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"})
		return
	}

	switch req.RoomType {
	case "meeting":
		userPackage.MeetingRoomUsed += 1
	case "training":
		userPackage.TrainingRoomUsed += 1
	case "multi":
		userPackage.MultiFunctionRoomUsed += 1
	default:
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	if err := db.Save(&userPackage).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢"})
}
