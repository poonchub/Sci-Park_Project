package controller

import (
	"log"
	"net/http"
	"sci-park_web-application/config"
	"sci-park_web-application/entity"

	"github.com/gin-gonic/gin"

	"time"
)

// GET /booking-rooms
func ListBookingRooms(c *gin.Context) {
	var booking []entity.BookingRoom

	db := config.DB()

	results := db.
		Preload("Room.Floor").
		Preload("TimeSlot").
		Preload("User").
		Find(&booking)
	if results.Error != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": results.Error.Error()})
		return
	}

	c.JSON(http.StatusOK, &booking)
}

func CreateBookingRoom(c *gin.Context) {
	db := config.DB()

	type BookingInput struct {
		UserID         uint     `json:"UserID"`
		RoomID         uint     `json:"RoomID"`
		TimeSlotID     uint     `json:"TimeSlotID"`
		Purpose        string   `json:"Purpose"`
		Dates          []string `json:"Dates"`
		AdditionalInfo string   `json:"AdditionalInfo"`
	}

	var bookings []entity.BookingRoom
	var inputs []BookingInput

	if err := c.ShouldBindJSON(&inputs); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: " + err.Error()})
		return
	}

	for _, input := range inputs {
		// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Room
		var room entity.Room
		if err := db.First(&room, input.RoomID).Error; err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"})
			return
		}

		// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞ Role
		var user entity.User
		if err := db.Preload("Role").First(&user, input.UserID).Error; err != nil {
			c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"})
			return
		}

		log.Printf("üîç UserID %d Role: %s", user.ID, user.Role.Name)


		// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏£‡∏ì‡∏µ‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤ 20 ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà admin/manager
		if room.Capacity > 20 {
			// ‡∏î‡∏∂‡∏á user ‡∏û‡∏£‡πâ‡∏≠‡∏° role
			var user entity.User
			if err := db.Preload("Role").First(&user, input.UserID).Error; err != nil {
				c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"})
				return
			}

			if user.Role.Name != "admin" && user.Role.Name != "Manager" {
				c.JSON(http.StatusForbidden, gin.H{
					"error": "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡∏∏‡∏ó‡∏¢‡∏≤‡∏ô‡∏ß‡∏¥‡∏ó‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ",
				})
				return
			}
		}
		// ‡∏ñ‡πâ‡∏≤ capacity <= 20 ‡∏´‡∏£‡∏∑‡∏≠ = 0 (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏à‡∏≥‡∏Å‡∏±‡∏î) ‡πÉ‡∏´‡πâ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥

		for _, dateStr := range input.Dates {
			parsedDate, err := time.Parse("2006-01-02", dateStr)
			if err != nil {
				c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: " + dateStr})
				return
			}

			var existingCount int64
			err = db.Model(&entity.BookingRoom{}).
				Where("room_id = ? AND DATE(date) = ? AND time_slot_id = ? AND status != ?", input.RoomID, parsedDate.Format("2006-01-02"), input.TimeSlotID, "cancelled").
				Count(&existingCount).Error
			if err != nil {
				c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"})
				return
			}

			if existingCount > 0 {
				c.JSON(http.StatusConflict, gin.H{
					"error": "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà " + dateStr + " ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å",
				})
				return
			}

			bookings = append(bookings, entity.BookingRoom{
				Date:           parsedDate,
				Purpose:        input.Purpose,
				UserID:         input.UserID,
				RoomID:         input.RoomID,
				TimeSlotID:     input.TimeSlotID,
				Status:         "pending",
				AdditionalInfo: input.AdditionalInfo,
			})
		}
	}

	if len(bookings) == 0 {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"})
		return
	}

	if err := db.Create(&bookings).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ: " + err.Error()})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"count":   len(bookings),
	})
}

func CancelBookingRoom(c *gin.Context) {
	db := config.DB()
	bookingID := c.Param("id")

	var booking entity.BookingRoom
	if err := db.First(&booking, bookingID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"})
		return
	}

	// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏ã‡πâ‡∏≥
	if booking.Status == "cancelled" {
		c.JSON(http.StatusConflict, gin.H{"error": "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß"})
		return
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô 2 ‡∏ß‡∏±‡∏ô)
	today := time.Now().Truncate(24 * time.Hour)
	twoDaysLater := today.Add(48 * time.Hour)
	bookingDate := booking.Date.Truncate(24 * time.Hour)

	if bookingDate.Before(twoDaysLater) {
		c.JSON(http.StatusBadRequest, gin.H{"error": "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"})
		return
	}

	// ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
	now := time.Now()
	booking.Status = "cancelled"
	booking.CancelledAt = &now // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ

	if err := db.Save(&booking).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message":     "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
		"cancelledAt": now.Format("2006-01-02 15:04:05"),
	})
}
